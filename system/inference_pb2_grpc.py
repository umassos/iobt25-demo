# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inference_pb2 as inference__pb2


class EncoderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/EncoderService/Predict',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )
        self.PredictFull = channel.unary_unary(
                '/EncoderService/PredictFull',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )
        self.PredictForward = channel.unary_unary(
                '/EncoderService/PredictForward',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )
        self.PredictOriginal = channel.unary_unary(
                '/EncoderService/PredictOriginal',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )
        self.PredictSplit = channel.unary_unary(
                '/EncoderService/PredictSplit',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )


class EncoderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictFull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictForward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictOriginal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictSplit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EncoderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
            'PredictFull': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictFull,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
            'PredictForward': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictForward,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
            'PredictOriginal': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictOriginal,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
            'PredictSplit': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictSplit,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EncoderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EncoderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EncoderService/Predict',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictFull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EncoderService/PredictFull',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EncoderService/PredictForward',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictOriginal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EncoderService/PredictOriginal',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictSplit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EncoderService/PredictSplit',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HeadServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/HeadService/Predict',
                request_serializer=inference__pb2.PredictRequest.SerializeToString,
                response_deserializer=inference__pb2.PredictResponse.FromString,
                )


class HeadServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeadServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=inference__pb2.PredictRequest.FromString,
                    response_serializer=inference__pb2.PredictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HeadService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HeadService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HeadService/Predict',
            inference__pb2.PredictRequest.SerializeToString,
            inference__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
