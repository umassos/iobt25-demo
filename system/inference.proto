syntax = "proto3";

service EncoderService {
    rpc Predict (PredictRequest) returns (PredictResponse);
    rpc PredictFull (PredictRequest) returns (PredictResponse);
    rpc PredictForward (PredictRequest) returns (PredictResponse);
    rpc PredictOriginal(PredictRequest) returns (PredictResponse);
    rpc PredictSplit(PredictRequest) returns (PredictResponse);
    rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
}

service HeadService {
    rpc Predict (PredictRequest) returns (PredictResponse);
    rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
}

message PredictRequest {
    int32 request_id = 1; // request_id
    bytes input = 2; // input numpy array compressed by zlib
    repeated int32 shape = 3;  // shape of the input tensor
    optional float enc_service_time = 4; // service time of the encoder 
    optional double enc_send_time = 5; // time stamp when the request was sent
}

message PredictResponse {
   bytes output = 1;          // output numpy array compressed by zlib
   repeated int32 shape = 2;  // shape of the output tensor
   bool full_model = 3; // wether the request was processed by the full model
   bool has_result = 4; // wether the response has result or not
   float service_time = 5; // Inference time of the request
   optional float network_time = 6; // Network overhead from using the ensemble model
}

message HeartbeatRequest {
}

message HeartbeatResponse {
}